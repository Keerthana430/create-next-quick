name: Post Test Results

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  comment:
    name: Post Test Results Comment
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion != 'cancelled'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: artifacts

      - name: Generate and post comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            async function findPrNumber() {
              const workflowRun = context.payload.workflow_run || {};
              const prs = workflowRun.pull_requests || [];
              if (prs.length > 0) return prs[0].number;

              const sha = workflowRun.head_sha;
              if (sha) {
                const q = `${sha} repo:${context.repo.owner}/${context.repo.repo} is:pr`;
                const search = await github.rest.search.issuesAndPullRequests({ q });
                if (search.data.items.length > 0) return search.data.items[0].number;
              }
              return null;
            }

            const prNumber = await findPrNumber();
            if (!prNumber) {
              console.log('No pull request found for this workflow run.');
              return;
            }

            const resultsDir = './artifacts';
            const artifactFolders = fs.readdirSync(resultsDir);
            const testResults = [];

            for (const folder of artifactFolders) {
              const filePath = path.join(resultsDir, folder, 'test-results.json');
              if (!fs.existsSync(filePath)) continue;

              try {
                const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
                testResults.push({ nodeVersion: folder.replace('test-results-', ''), data });
              } catch (err) {
                console.error(`Error parsing ${filePath}:`, err);
              }
            }

            if (testResults.length === 0) {
              console.log('No test result JSON found.');
              return;
            }

            let comment = '## üß™ Mocha Test Results Summary\n\n';
            comment += `**Workflow Run:** [#${context.payload.workflow_run.run_number}](${context.payload.workflow_run.html_url})\n\n`;

            for (const { nodeVersion, data } of testResults) {
              const total = data.stats.tests || 0;
              const passes = data.stats.passes || 0;
              const failures = data.stats.failures || 0;
              const duration = (data.stats.duration / 1000).toFixed(2);
              const status = failures === 0 ? '‚úÖ PASSED' : '‚ùå FAILED';

              comment += `### Node.js ${nodeVersion} ‚Äî ${status}\n`;
              comment += `- **Total Tests:** ${total}\n`;
              comment += `- **Passed:** ${passes}\n`;
              comment += `- **Failed:** ${failures}\n`;
              comment += `- **Duration:** ${duration}s\n\n`;

              if (failures > 0 && Array.isArray(data.failures)) {
                comment += '**Failed Tests:**\n';
                for (const f of data.failures) {
                  comment += `- \`${f.fullTitle}\`\n`;
                  if (f.err && f.err.message) {
                    comment += `  > ${f.err.message.substring(0, 200)}\n`;
                  }
                }
                comment += '\n';
              }
            }

            comment += testResults.every(r => r.data.stats.failures === 0)
              ? '---\n‚ú® **All Mocha tests passed successfully!**'
              : '---\n‚ö†Ô∏è **Some tests failed. Please review the failures above.**';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });
